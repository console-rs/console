// Bindings generated by `windows-bindgen` 0.47.0

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]
pub type PCWSTR = *const u16;
pub type BOOL = i32;
pub type HANDLE = isize;
pub const MAX_PATH: u32 = 260u32;
pub const INVALID_HANDLE_VALUE: HANDLE = -1i32 as _;
#[repr(C)]
pub struct COORD {
    pub X: i16,
    pub Y: i16,
}
impl ::core::marker::Copy for COORD {}
impl ::core::clone::Clone for COORD {
    fn clone(&self) -> Self {
        *self
    }
}
#[link(name = "windows")]
extern "system" {
    pub fn FillConsoleOutputAttribute(
        hconsoleoutput: HANDLE,
        wattribute: u16,
        nlength: u32,
        dwwritecoord: COORD,
        lpnumberofattrswritten: *mut u32,
    ) -> BOOL;
}
#[link(name = "windows")]
extern "system" {
    pub fn FillConsoleOutputCharacterA(
        hconsoleoutput: HANDLE,
        ccharacter: u8,
        nlength: u32,
        dwwritecoord: COORD,
        lpnumberofcharswritten: *mut u32,
    ) -> BOOL;
}
#[repr(C)]
pub struct CONSOLE_CURSOR_INFO {
    pub dwSize: u32,
    pub bVisible: BOOL,
}
impl ::core::marker::Copy for CONSOLE_CURSOR_INFO {}
impl ::core::clone::Clone for CONSOLE_CURSOR_INFO {
    fn clone(&self) -> Self {
        *self
    }
}
#[link(name = "windows")]
extern "system" {
    pub fn GetConsoleCursorInfo(
        hconsoleoutput: HANDLE,
        lpconsolecursorinfo: *mut CONSOLE_CURSOR_INFO,
    ) -> BOOL;
}
pub type CONSOLE_MODE = u32;
pub const ENABLE_PROCESSED_INPUT: CONSOLE_MODE = 1u32;
pub const ENABLE_LINE_INPUT: CONSOLE_MODE = 2u32;
pub const ENABLE_ECHO_INPUT: CONSOLE_MODE = 4u32;
pub const ENABLE_WINDOW_INPUT: CONSOLE_MODE = 8u32;
pub const ENABLE_MOUSE_INPUT: CONSOLE_MODE = 16u32;
pub const ENABLE_INSERT_MODE: CONSOLE_MODE = 32u32;
pub const ENABLE_QUICK_EDIT_MODE: CONSOLE_MODE = 64u32;
pub const ENABLE_EXTENDED_FLAGS: CONSOLE_MODE = 128u32;
pub const ENABLE_AUTO_POSITION: CONSOLE_MODE = 256u32;
pub const ENABLE_VIRTUAL_TERMINAL_INPUT: CONSOLE_MODE = 512u32;
pub const ENABLE_PROCESSED_OUTPUT: CONSOLE_MODE = 1u32;
pub const ENABLE_WRAP_AT_EOL_OUTPUT: CONSOLE_MODE = 2u32;
pub const ENABLE_VIRTUAL_TERMINAL_PROCESSING: CONSOLE_MODE = 4u32;
pub const DISABLE_NEWLINE_AUTO_RETURN: CONSOLE_MODE = 8u32;
pub const ENABLE_LVB_GRID_WORLDWIDE: CONSOLE_MODE = 16u32;
#[link(name = "windows")]
extern "system" {
    pub fn GetConsoleMode(hconsolehandle: HANDLE, lpmode: *mut CONSOLE_MODE) -> BOOL;
}
#[repr(C)]
pub struct SMALL_RECT {
    pub Left: i16,
    pub Top: i16,
    pub Right: i16,
    pub Bottom: i16,
}
impl ::core::marker::Copy for SMALL_RECT {}
impl ::core::clone::Clone for SMALL_RECT {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
pub struct CONSOLE_SCREEN_BUFFER_INFO {
    pub dwSize: COORD,
    pub dwCursorPosition: COORD,
    pub wAttributes: CONSOLE_CHARACTER_ATTRIBUTES,
    pub srWindow: SMALL_RECT,
    pub dwMaximumWindowSize: COORD,
}
impl ::core::marker::Copy for CONSOLE_SCREEN_BUFFER_INFO {}
impl ::core::clone::Clone for CONSOLE_SCREEN_BUFFER_INFO {
    fn clone(&self) -> Self {
        *self
    }
}
#[link(name = "windows")]
extern "system" {
    pub fn GetConsoleScreenBufferInfo(
        hconsoleoutput: HANDLE,
        lpconsolescreenbufferinfo: *mut CONSOLE_SCREEN_BUFFER_INFO,
    ) -> BOOL;
}
#[link(name = "windows")]
extern "system" {
    pub fn GetNumberOfConsoleInputEvents(hconsoleinput: HANDLE, lpnumberofevents: *mut u32)
        -> BOOL;
}
pub type STD_HANDLE = u32;
pub const STD_INPUT_HANDLE: STD_HANDLE = 4294967286u32;
pub const STD_OUTPUT_HANDLE: STD_HANDLE = 4294967285u32;
pub const STD_ERROR_HANDLE: STD_HANDLE = 4294967284u32;
#[link(name = "windows")]
extern "system" {
    pub fn GetStdHandle(nstdhandle: STD_HANDLE) -> HANDLE;
}
pub const KEY_EVENT: u32 = 1u32;
#[repr(C)]
pub struct KEY_EVENT_RECORD {
    pub bKeyDown: BOOL,
    pub wRepeatCount: u16,
    pub wVirtualKeyCode: u16,
    pub wVirtualScanCode: u16,
    pub uChar: KEY_EVENT_RECORD_0,
    pub dwControlKeyState: u32,
}
impl ::core::marker::Copy for KEY_EVENT_RECORD {}
impl ::core::clone::Clone for KEY_EVENT_RECORD {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
pub union KEY_EVENT_RECORD_0 {
    pub UnicodeChar: u16,
    pub AsciiChar: u8,
}
impl ::core::marker::Copy for KEY_EVENT_RECORD_0 {}
impl ::core::clone::Clone for KEY_EVENT_RECORD_0 {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
pub struct MOUSE_EVENT_RECORD {
    pub dwMousePosition: COORD,
    pub dwButtonState: u32,
    pub dwControlKeyState: u32,
    pub dwEventFlags: u32,
}
impl ::core::marker::Copy for MOUSE_EVENT_RECORD {}
impl ::core::clone::Clone for MOUSE_EVENT_RECORD {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
pub struct WINDOW_BUFFER_SIZE_RECORD {
    pub dwSize: COORD,
}
impl ::core::marker::Copy for WINDOW_BUFFER_SIZE_RECORD {}
impl ::core::clone::Clone for WINDOW_BUFFER_SIZE_RECORD {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
pub struct MENU_EVENT_RECORD {
    pub dwCommandId: u32,
}
impl ::core::marker::Copy for MENU_EVENT_RECORD {}
impl ::core::clone::Clone for MENU_EVENT_RECORD {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
pub struct FOCUS_EVENT_RECORD {
    pub bSetFocus: BOOL,
}
impl ::core::marker::Copy for FOCUS_EVENT_RECORD {}
impl ::core::clone::Clone for FOCUS_EVENT_RECORD {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
pub struct INPUT_RECORD {
    pub EventType: u16,
    pub Event: INPUT_RECORD_0,
}
impl ::core::marker::Copy for INPUT_RECORD {}
impl ::core::clone::Clone for INPUT_RECORD {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
pub union INPUT_RECORD_0 {
    pub KeyEvent: KEY_EVENT_RECORD,
    pub MouseEvent: MOUSE_EVENT_RECORD,
    pub WindowBufferSizeEvent: WINDOW_BUFFER_SIZE_RECORD,
    pub MenuEvent: MENU_EVENT_RECORD,
    pub FocusEvent: FOCUS_EVENT_RECORD,
}
impl ::core::marker::Copy for INPUT_RECORD_0 {}
impl ::core::clone::Clone for INPUT_RECORD_0 {
    fn clone(&self) -> Self {
        *self
    }
}
#[link(name = "windows")]
extern "system" {
    pub fn ReadConsoleInputW(
        hconsoleinput: HANDLE,
        lpbuffer: *mut INPUT_RECORD,
        nlength: u32,
        lpnumberofeventsread: *mut u32,
    ) -> BOOL;
}
pub type CONSOLE_CHARACTER_ATTRIBUTES = u16;
pub const FOREGROUND_BLUE: CONSOLE_CHARACTER_ATTRIBUTES = 1u16;
pub const FOREGROUND_GREEN: CONSOLE_CHARACTER_ATTRIBUTES = 2u16;
pub const FOREGROUND_RED: CONSOLE_CHARACTER_ATTRIBUTES = 4u16;
pub const FOREGROUND_INTENSITY: CONSOLE_CHARACTER_ATTRIBUTES = 8u16;
pub const BACKGROUND_BLUE: CONSOLE_CHARACTER_ATTRIBUTES = 16u16;
pub const BACKGROUND_GREEN: CONSOLE_CHARACTER_ATTRIBUTES = 32u16;
pub const BACKGROUND_RED: CONSOLE_CHARACTER_ATTRIBUTES = 64u16;
pub const BACKGROUND_INTENSITY: CONSOLE_CHARACTER_ATTRIBUTES = 128u16;
pub const COMMON_LVB_LEADING_BYTE: CONSOLE_CHARACTER_ATTRIBUTES = 256u16;
pub const COMMON_LVB_TRAILING_BYTE: CONSOLE_CHARACTER_ATTRIBUTES = 512u16;
pub const COMMON_LVB_GRID_HORIZONTAL: CONSOLE_CHARACTER_ATTRIBUTES = 1024u16;
pub const COMMON_LVB_GRID_LVERTICAL: CONSOLE_CHARACTER_ATTRIBUTES = 2048u16;
pub const COMMON_LVB_GRID_RVERTICAL: CONSOLE_CHARACTER_ATTRIBUTES = 4096u16;
pub const COMMON_LVB_REVERSE_VIDEO: CONSOLE_CHARACTER_ATTRIBUTES = 16384u16;
pub const COMMON_LVB_UNDERSCORE: CONSOLE_CHARACTER_ATTRIBUTES = 32768u16;
pub const COMMON_LVB_SBCSDBCS: CONSOLE_CHARACTER_ATTRIBUTES = 768u16;
#[link(name = "windows")]
extern "system" {
    pub fn SetConsoleTextAttribute(
        hconsoleoutput: HANDLE,
        wattributes: CONSOLE_CHARACTER_ATTRIBUTES,
    ) -> BOOL;
}
#[link(name = "windows")]
extern "system" {
    pub fn SetConsoleCursorInfo(
        hconsoleoutput: HANDLE,
        lpconsolecursorinfo: *const CONSOLE_CURSOR_INFO,
    ) -> BOOL;
}
#[link(name = "windows")]
extern "system" {
    pub fn SetConsoleCursorPosition(hconsoleoutput: HANDLE, dwcursorposition: COORD) -> BOOL;
}
#[link(name = "windows")]
extern "system" {
    pub fn SetConsoleMode(hconsolehandle: HANDLE, dwmode: CONSOLE_MODE) -> BOOL;
}
#[link(name = "windows")]
extern "system" {
    pub fn SetConsoleTitleW(lpconsoletitle: PCWSTR) -> BOOL;
}
#[repr(C)]
pub struct FILE_NAME_INFO {
    pub FileNameLength: u32,
    pub FileName: [u16; 1],
}
impl ::core::marker::Copy for FILE_NAME_INFO {}
impl ::core::clone::Clone for FILE_NAME_INFO {
    fn clone(&self) -> Self {
        *self
    }
}
pub type FILE_INFO_BY_HANDLE_CLASS = i32;
pub const FileBasicInfo: FILE_INFO_BY_HANDLE_CLASS = 0i32;
pub const FileStandardInfo: FILE_INFO_BY_HANDLE_CLASS = 1i32;
pub const FileNameInfo: FILE_INFO_BY_HANDLE_CLASS = 2i32;
pub const FileRenameInfo: FILE_INFO_BY_HANDLE_CLASS = 3i32;
pub const FileDispositionInfo: FILE_INFO_BY_HANDLE_CLASS = 4i32;
pub const FileAllocationInfo: FILE_INFO_BY_HANDLE_CLASS = 5i32;
pub const FileEndOfFileInfo: FILE_INFO_BY_HANDLE_CLASS = 6i32;
pub const FileStreamInfo: FILE_INFO_BY_HANDLE_CLASS = 7i32;
pub const FileCompressionInfo: FILE_INFO_BY_HANDLE_CLASS = 8i32;
pub const FileAttributeTagInfo: FILE_INFO_BY_HANDLE_CLASS = 9i32;
pub const FileIdBothDirectoryInfo: FILE_INFO_BY_HANDLE_CLASS = 10i32;
pub const FileIdBothDirectoryRestartInfo: FILE_INFO_BY_HANDLE_CLASS = 11i32;
pub const FileIoPriorityHintInfo: FILE_INFO_BY_HANDLE_CLASS = 12i32;
pub const FileRemoteProtocolInfo: FILE_INFO_BY_HANDLE_CLASS = 13i32;
pub const FileFullDirectoryInfo: FILE_INFO_BY_HANDLE_CLASS = 14i32;
pub const FileFullDirectoryRestartInfo: FILE_INFO_BY_HANDLE_CLASS = 15i32;
pub const FileStorageInfo: FILE_INFO_BY_HANDLE_CLASS = 16i32;
pub const FileAlignmentInfo: FILE_INFO_BY_HANDLE_CLASS = 17i32;
pub const FileIdInfo: FILE_INFO_BY_HANDLE_CLASS = 18i32;
pub const FileIdExtdDirectoryInfo: FILE_INFO_BY_HANDLE_CLASS = 19i32;
pub const FileIdExtdDirectoryRestartInfo: FILE_INFO_BY_HANDLE_CLASS = 20i32;
pub const FileDispositionInfoEx: FILE_INFO_BY_HANDLE_CLASS = 21i32;
pub const FileRenameInfoEx: FILE_INFO_BY_HANDLE_CLASS = 22i32;
pub const FileCaseSensitiveInfo: FILE_INFO_BY_HANDLE_CLASS = 23i32;
pub const FileNormalizedNameInfo: FILE_INFO_BY_HANDLE_CLASS = 24i32;
pub const MaximumFileInfoByHandleClass: FILE_INFO_BY_HANDLE_CLASS = 25i32;
#[link(name = "windows")]
extern "system" {
    pub fn GetFileInformationByHandleEx(
        hfile: HANDLE,
        fileinformationclass: FILE_INFO_BY_HANDLE_CLASS,
        lpfileinformation: *mut ::core::ffi::c_void,
        dwbuffersize: u32,
    ) -> BOOL;
}
pub type VIRTUAL_KEY = u16;
pub const VK_0: VIRTUAL_KEY = 48u16;
pub const VK_1: VIRTUAL_KEY = 49u16;
pub const VK_2: VIRTUAL_KEY = 50u16;
pub const VK_3: VIRTUAL_KEY = 51u16;
pub const VK_4: VIRTUAL_KEY = 52u16;
pub const VK_5: VIRTUAL_KEY = 53u16;
pub const VK_6: VIRTUAL_KEY = 54u16;
pub const VK_7: VIRTUAL_KEY = 55u16;
pub const VK_8: VIRTUAL_KEY = 56u16;
pub const VK_9: VIRTUAL_KEY = 57u16;
pub const VK_A: VIRTUAL_KEY = 65u16;
pub const VK_B: VIRTUAL_KEY = 66u16;
pub const VK_C: VIRTUAL_KEY = 67u16;
pub const VK_D: VIRTUAL_KEY = 68u16;
pub const VK_E: VIRTUAL_KEY = 69u16;
pub const VK_F: VIRTUAL_KEY = 70u16;
pub const VK_G: VIRTUAL_KEY = 71u16;
pub const VK_H: VIRTUAL_KEY = 72u16;
pub const VK_I: VIRTUAL_KEY = 73u16;
pub const VK_J: VIRTUAL_KEY = 74u16;
pub const VK_K: VIRTUAL_KEY = 75u16;
pub const VK_L: VIRTUAL_KEY = 76u16;
pub const VK_M: VIRTUAL_KEY = 77u16;
pub const VK_N: VIRTUAL_KEY = 78u16;
pub const VK_O: VIRTUAL_KEY = 79u16;
pub const VK_P: VIRTUAL_KEY = 80u16;
pub const VK_Q: VIRTUAL_KEY = 81u16;
pub const VK_R: VIRTUAL_KEY = 82u16;
pub const VK_S: VIRTUAL_KEY = 83u16;
pub const VK_T: VIRTUAL_KEY = 84u16;
pub const VK_U: VIRTUAL_KEY = 85u16;
pub const VK_V: VIRTUAL_KEY = 86u16;
pub const VK_W: VIRTUAL_KEY = 87u16;
pub const VK_X: VIRTUAL_KEY = 88u16;
pub const VK_Y: VIRTUAL_KEY = 89u16;
pub const VK_Z: VIRTUAL_KEY = 90u16;
pub const VK_ABNT_C1: VIRTUAL_KEY = 193u16;
pub const VK_ABNT_C2: VIRTUAL_KEY = 194u16;
pub const VK_DBE_ALPHANUMERIC: VIRTUAL_KEY = 240u16;
pub const VK_DBE_CODEINPUT: VIRTUAL_KEY = 250u16;
pub const VK_DBE_DBCSCHAR: VIRTUAL_KEY = 244u16;
pub const VK_DBE_DETERMINESTRING: VIRTUAL_KEY = 252u16;
pub const VK_DBE_ENTERDLGCONVERSIONMODE: VIRTUAL_KEY = 253u16;
pub const VK_DBE_ENTERIMECONFIGMODE: VIRTUAL_KEY = 248u16;
pub const VK_DBE_ENTERWORDREGISTERMODE: VIRTUAL_KEY = 247u16;
pub const VK_DBE_FLUSHSTRING: VIRTUAL_KEY = 249u16;
pub const VK_DBE_HIRAGANA: VIRTUAL_KEY = 242u16;
pub const VK_DBE_KATAKANA: VIRTUAL_KEY = 241u16;
pub const VK_DBE_NOCODEINPUT: VIRTUAL_KEY = 251u16;
pub const VK_DBE_NOROMAN: VIRTUAL_KEY = 246u16;
pub const VK_DBE_ROMAN: VIRTUAL_KEY = 245u16;
pub const VK_DBE_SBCSCHAR: VIRTUAL_KEY = 243u16;
pub const VK__none_: VIRTUAL_KEY = 255u16;
pub const VK_LBUTTON: VIRTUAL_KEY = 1u16;
pub const VK_RBUTTON: VIRTUAL_KEY = 2u16;
pub const VK_CANCEL: VIRTUAL_KEY = 3u16;
pub const VK_MBUTTON: VIRTUAL_KEY = 4u16;
pub const VK_XBUTTON1: VIRTUAL_KEY = 5u16;
pub const VK_XBUTTON2: VIRTUAL_KEY = 6u16;
pub const VK_BACK: VIRTUAL_KEY = 8u16;
pub const VK_TAB: VIRTUAL_KEY = 9u16;
pub const VK_CLEAR: VIRTUAL_KEY = 12u16;
pub const VK_RETURN: VIRTUAL_KEY = 13u16;
pub const VK_SHIFT: VIRTUAL_KEY = 16u16;
pub const VK_CONTROL: VIRTUAL_KEY = 17u16;
pub const VK_MENU: VIRTUAL_KEY = 18u16;
pub const VK_PAUSE: VIRTUAL_KEY = 19u16;
pub const VK_CAPITAL: VIRTUAL_KEY = 20u16;
pub const VK_KANA: VIRTUAL_KEY = 21u16;
pub const VK_HANGEUL: VIRTUAL_KEY = 21u16;
pub const VK_HANGUL: VIRTUAL_KEY = 21u16;
pub const VK_IME_ON: VIRTUAL_KEY = 22u16;
pub const VK_JUNJA: VIRTUAL_KEY = 23u16;
pub const VK_FINAL: VIRTUAL_KEY = 24u16;
pub const VK_HANJA: VIRTUAL_KEY = 25u16;
pub const VK_KANJI: VIRTUAL_KEY = 25u16;
pub const VK_IME_OFF: VIRTUAL_KEY = 26u16;
pub const VK_ESCAPE: VIRTUAL_KEY = 27u16;
pub const VK_CONVERT: VIRTUAL_KEY = 28u16;
pub const VK_NONCONVERT: VIRTUAL_KEY = 29u16;
pub const VK_ACCEPT: VIRTUAL_KEY = 30u16;
pub const VK_MODECHANGE: VIRTUAL_KEY = 31u16;
pub const VK_SPACE: VIRTUAL_KEY = 32u16;
pub const VK_PRIOR: VIRTUAL_KEY = 33u16;
pub const VK_NEXT: VIRTUAL_KEY = 34u16;
pub const VK_END: VIRTUAL_KEY = 35u16;
pub const VK_HOME: VIRTUAL_KEY = 36u16;
pub const VK_LEFT: VIRTUAL_KEY = 37u16;
pub const VK_UP: VIRTUAL_KEY = 38u16;
pub const VK_RIGHT: VIRTUAL_KEY = 39u16;
pub const VK_DOWN: VIRTUAL_KEY = 40u16;
pub const VK_SELECT: VIRTUAL_KEY = 41u16;
pub const VK_PRINT: VIRTUAL_KEY = 42u16;
pub const VK_EXECUTE: VIRTUAL_KEY = 43u16;
pub const VK_SNAPSHOT: VIRTUAL_KEY = 44u16;
pub const VK_INSERT: VIRTUAL_KEY = 45u16;
pub const VK_DELETE: VIRTUAL_KEY = 46u16;
pub const VK_HELP: VIRTUAL_KEY = 47u16;
pub const VK_LWIN: VIRTUAL_KEY = 91u16;
pub const VK_RWIN: VIRTUAL_KEY = 92u16;
pub const VK_APPS: VIRTUAL_KEY = 93u16;
pub const VK_SLEEP: VIRTUAL_KEY = 95u16;
pub const VK_NUMPAD0: VIRTUAL_KEY = 96u16;
pub const VK_NUMPAD1: VIRTUAL_KEY = 97u16;
pub const VK_NUMPAD2: VIRTUAL_KEY = 98u16;
pub const VK_NUMPAD3: VIRTUAL_KEY = 99u16;
pub const VK_NUMPAD4: VIRTUAL_KEY = 100u16;
pub const VK_NUMPAD5: VIRTUAL_KEY = 101u16;
pub const VK_NUMPAD6: VIRTUAL_KEY = 102u16;
pub const VK_NUMPAD7: VIRTUAL_KEY = 103u16;
pub const VK_NUMPAD8: VIRTUAL_KEY = 104u16;
pub const VK_NUMPAD9: VIRTUAL_KEY = 105u16;
pub const VK_MULTIPLY: VIRTUAL_KEY = 106u16;
pub const VK_ADD: VIRTUAL_KEY = 107u16;
pub const VK_SEPARATOR: VIRTUAL_KEY = 108u16;
pub const VK_SUBTRACT: VIRTUAL_KEY = 109u16;
pub const VK_DECIMAL: VIRTUAL_KEY = 110u16;
pub const VK_DIVIDE: VIRTUAL_KEY = 111u16;
pub const VK_F1: VIRTUAL_KEY = 112u16;
pub const VK_F2: VIRTUAL_KEY = 113u16;
pub const VK_F3: VIRTUAL_KEY = 114u16;
pub const VK_F4: VIRTUAL_KEY = 115u16;
pub const VK_F5: VIRTUAL_KEY = 116u16;
pub const VK_F6: VIRTUAL_KEY = 117u16;
pub const VK_F7: VIRTUAL_KEY = 118u16;
pub const VK_F8: VIRTUAL_KEY = 119u16;
pub const VK_F9: VIRTUAL_KEY = 120u16;
pub const VK_F10: VIRTUAL_KEY = 121u16;
pub const VK_F11: VIRTUAL_KEY = 122u16;
pub const VK_F12: VIRTUAL_KEY = 123u16;
pub const VK_F13: VIRTUAL_KEY = 124u16;
pub const VK_F14: VIRTUAL_KEY = 125u16;
pub const VK_F15: VIRTUAL_KEY = 126u16;
pub const VK_F16: VIRTUAL_KEY = 127u16;
pub const VK_F17: VIRTUAL_KEY = 128u16;
pub const VK_F18: VIRTUAL_KEY = 129u16;
pub const VK_F19: VIRTUAL_KEY = 130u16;
pub const VK_F20: VIRTUAL_KEY = 131u16;
pub const VK_F21: VIRTUAL_KEY = 132u16;
pub const VK_F22: VIRTUAL_KEY = 133u16;
pub const VK_F23: VIRTUAL_KEY = 134u16;
pub const VK_F24: VIRTUAL_KEY = 135u16;
pub const VK_NAVIGATION_VIEW: VIRTUAL_KEY = 136u16;
pub const VK_NAVIGATION_MENU: VIRTUAL_KEY = 137u16;
pub const VK_NAVIGATION_UP: VIRTUAL_KEY = 138u16;
pub const VK_NAVIGATION_DOWN: VIRTUAL_KEY = 139u16;
pub const VK_NAVIGATION_LEFT: VIRTUAL_KEY = 140u16;
pub const VK_NAVIGATION_RIGHT: VIRTUAL_KEY = 141u16;
pub const VK_NAVIGATION_ACCEPT: VIRTUAL_KEY = 142u16;
pub const VK_NAVIGATION_CANCEL: VIRTUAL_KEY = 143u16;
pub const VK_NUMLOCK: VIRTUAL_KEY = 144u16;
pub const VK_SCROLL: VIRTUAL_KEY = 145u16;
pub const VK_OEM_NEC_EQUAL: VIRTUAL_KEY = 146u16;
pub const VK_OEM_FJ_JISHO: VIRTUAL_KEY = 146u16;
pub const VK_OEM_FJ_MASSHOU: VIRTUAL_KEY = 147u16;
pub const VK_OEM_FJ_TOUROKU: VIRTUAL_KEY = 148u16;
pub const VK_OEM_FJ_LOYA: VIRTUAL_KEY = 149u16;
pub const VK_OEM_FJ_ROYA: VIRTUAL_KEY = 150u16;
pub const VK_LSHIFT: VIRTUAL_KEY = 160u16;
pub const VK_RSHIFT: VIRTUAL_KEY = 161u16;
pub const VK_LCONTROL: VIRTUAL_KEY = 162u16;
pub const VK_RCONTROL: VIRTUAL_KEY = 163u16;
pub const VK_LMENU: VIRTUAL_KEY = 164u16;
pub const VK_RMENU: VIRTUAL_KEY = 165u16;
pub const VK_BROWSER_BACK: VIRTUAL_KEY = 166u16;
pub const VK_BROWSER_FORWARD: VIRTUAL_KEY = 167u16;
pub const VK_BROWSER_REFRESH: VIRTUAL_KEY = 168u16;
pub const VK_BROWSER_STOP: VIRTUAL_KEY = 169u16;
pub const VK_BROWSER_SEARCH: VIRTUAL_KEY = 170u16;
pub const VK_BROWSER_FAVORITES: VIRTUAL_KEY = 171u16;
pub const VK_BROWSER_HOME: VIRTUAL_KEY = 172u16;
pub const VK_VOLUME_MUTE: VIRTUAL_KEY = 173u16;
pub const VK_VOLUME_DOWN: VIRTUAL_KEY = 174u16;
pub const VK_VOLUME_UP: VIRTUAL_KEY = 175u16;
pub const VK_MEDIA_NEXT_TRACK: VIRTUAL_KEY = 176u16;
pub const VK_MEDIA_PREV_TRACK: VIRTUAL_KEY = 177u16;
pub const VK_MEDIA_STOP: VIRTUAL_KEY = 178u16;
pub const VK_MEDIA_PLAY_PAUSE: VIRTUAL_KEY = 179u16;
pub const VK_LAUNCH_MAIL: VIRTUAL_KEY = 180u16;
pub const VK_LAUNCH_MEDIA_SELECT: VIRTUAL_KEY = 181u16;
pub const VK_LAUNCH_APP1: VIRTUAL_KEY = 182u16;
pub const VK_LAUNCH_APP2: VIRTUAL_KEY = 183u16;
pub const VK_OEM_1: VIRTUAL_KEY = 186u16;
pub const VK_OEM_PLUS: VIRTUAL_KEY = 187u16;
pub const VK_OEM_COMMA: VIRTUAL_KEY = 188u16;
pub const VK_OEM_MINUS: VIRTUAL_KEY = 189u16;
pub const VK_OEM_PERIOD: VIRTUAL_KEY = 190u16;
pub const VK_OEM_2: VIRTUAL_KEY = 191u16;
pub const VK_OEM_3: VIRTUAL_KEY = 192u16;
pub const VK_GAMEPAD_A: VIRTUAL_KEY = 195u16;
pub const VK_GAMEPAD_B: VIRTUAL_KEY = 196u16;
pub const VK_GAMEPAD_X: VIRTUAL_KEY = 197u16;
pub const VK_GAMEPAD_Y: VIRTUAL_KEY = 198u16;
pub const VK_GAMEPAD_RIGHT_SHOULDER: VIRTUAL_KEY = 199u16;
pub const VK_GAMEPAD_LEFT_SHOULDER: VIRTUAL_KEY = 200u16;
pub const VK_GAMEPAD_LEFT_TRIGGER: VIRTUAL_KEY = 201u16;
pub const VK_GAMEPAD_RIGHT_TRIGGER: VIRTUAL_KEY = 202u16;
pub const VK_GAMEPAD_DPAD_UP: VIRTUAL_KEY = 203u16;
pub const VK_GAMEPAD_DPAD_DOWN: VIRTUAL_KEY = 204u16;
pub const VK_GAMEPAD_DPAD_LEFT: VIRTUAL_KEY = 205u16;
pub const VK_GAMEPAD_DPAD_RIGHT: VIRTUAL_KEY = 206u16;
pub const VK_GAMEPAD_MENU: VIRTUAL_KEY = 207u16;
pub const VK_GAMEPAD_VIEW: VIRTUAL_KEY = 208u16;
pub const VK_GAMEPAD_LEFT_THUMBSTICK_BUTTON: VIRTUAL_KEY = 209u16;
pub const VK_GAMEPAD_RIGHT_THUMBSTICK_BUTTON: VIRTUAL_KEY = 210u16;
pub const VK_GAMEPAD_LEFT_THUMBSTICK_UP: VIRTUAL_KEY = 211u16;
pub const VK_GAMEPAD_LEFT_THUMBSTICK_DOWN: VIRTUAL_KEY = 212u16;
pub const VK_GAMEPAD_LEFT_THUMBSTICK_RIGHT: VIRTUAL_KEY = 213u16;
pub const VK_GAMEPAD_LEFT_THUMBSTICK_LEFT: VIRTUAL_KEY = 214u16;
pub const VK_GAMEPAD_RIGHT_THUMBSTICK_UP: VIRTUAL_KEY = 215u16;
pub const VK_GAMEPAD_RIGHT_THUMBSTICK_DOWN: VIRTUAL_KEY = 216u16;
pub const VK_GAMEPAD_RIGHT_THUMBSTICK_RIGHT: VIRTUAL_KEY = 217u16;
pub const VK_GAMEPAD_RIGHT_THUMBSTICK_LEFT: VIRTUAL_KEY = 218u16;
pub const VK_OEM_4: VIRTUAL_KEY = 219u16;
pub const VK_OEM_5: VIRTUAL_KEY = 220u16;
pub const VK_OEM_6: VIRTUAL_KEY = 221u16;
pub const VK_OEM_7: VIRTUAL_KEY = 222u16;
pub const VK_OEM_8: VIRTUAL_KEY = 223u16;
pub const VK_OEM_AX: VIRTUAL_KEY = 225u16;
pub const VK_OEM_102: VIRTUAL_KEY = 226u16;
pub const VK_ICO_HELP: VIRTUAL_KEY = 227u16;
pub const VK_ICO_00: VIRTUAL_KEY = 228u16;
pub const VK_PROCESSKEY: VIRTUAL_KEY = 229u16;
pub const VK_ICO_CLEAR: VIRTUAL_KEY = 230u16;
pub const VK_PACKET: VIRTUAL_KEY = 231u16;
pub const VK_OEM_RESET: VIRTUAL_KEY = 233u16;
pub const VK_OEM_JUMP: VIRTUAL_KEY = 234u16;
pub const VK_OEM_PA1: VIRTUAL_KEY = 235u16;
pub const VK_OEM_PA2: VIRTUAL_KEY = 236u16;
pub const VK_OEM_PA3: VIRTUAL_KEY = 237u16;
pub const VK_OEM_WSCTRL: VIRTUAL_KEY = 238u16;
pub const VK_OEM_CUSEL: VIRTUAL_KEY = 239u16;
pub const VK_OEM_ATTN: VIRTUAL_KEY = 240u16;
pub const VK_OEM_FINISH: VIRTUAL_KEY = 241u16;
pub const VK_OEM_COPY: VIRTUAL_KEY = 242u16;
pub const VK_OEM_AUTO: VIRTUAL_KEY = 243u16;
pub const VK_OEM_ENLW: VIRTUAL_KEY = 244u16;
pub const VK_OEM_BACKTAB: VIRTUAL_KEY = 245u16;
pub const VK_ATTN: VIRTUAL_KEY = 246u16;
pub const VK_CRSEL: VIRTUAL_KEY = 247u16;
pub const VK_EXSEL: VIRTUAL_KEY = 248u16;
pub const VK_EREOF: VIRTUAL_KEY = 249u16;
pub const VK_PLAY: VIRTUAL_KEY = 250u16;
pub const VK_ZOOM: VIRTUAL_KEY = 251u16;
pub const VK_NONAME: VIRTUAL_KEY = 252u16;
pub const VK_PA1: VIRTUAL_KEY = 253u16;
pub const VK_OEM_CLEAR: VIRTUAL_KEY = 254u16;
